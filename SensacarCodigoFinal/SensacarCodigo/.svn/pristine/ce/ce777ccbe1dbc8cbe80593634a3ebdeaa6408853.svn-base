package Negocio.Empleado;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.LockModeType;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import Integraci칩n.Empleado.TEmpleado;
import Integraci칩n.Empleado.TEmpleadoCompleto;
import Integraci칩n.Empleado.TEmpleadoParcial;
import Negocio.Competencia.Tiene;
import Negocio.Departamento.Departamento;

public class SAEmpleadoImp implements SAEmpleado {

	public int crearEmpleado(TEmpleado emp) {
		int retorno = -1;

		if (emp != null) {
			Empleado empleado = null;
			if (emp instanceof TEmpleadoCompleto) {
				empleado = new EmpleadoTC((TEmpleadoCompleto) emp);
			} else {
				empleado = new EmpleadoTP((TEmpleadoParcial) emp);
			}
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("Sensacar");
			EntityManager entityManager = emfactory.createEntityManager();
			EntityTransaction entityTransaction = entityManager.getTransaction();
			entityTransaction.begin();
			TypedQuery<Empleado> consulta = entityManager.createNamedQuery("Negocio.Empleado.Empleado.findByDNI",
					Empleado.class);
			consulta.setParameter("DNI", empleado.getDNI());
			List<Empleado> existe = consulta.getResultList();
			// Comprobar que ningun empleado con ese DNI existia
			if (existe.isEmpty()) {
				empleado.setActivo(true);
				Departamento departamento = entityManager.find(Departamento.class, emp.getDepartamento());
				// Comprobar que el departamento existe y est치 activo
				if (departamento != null && departamento.getActivo()) {
					entityManager.lock(departamento, LockModeType.OPTIMISTIC_FORCE_INCREMENT);
					empleado.setDepartamento(departamento);
					entityManager.persist(empleado);
					entityTransaction.commit();
					retorno = empleado.getId();
				} else
					entityTransaction.rollback();

			} else {
				Empleado empleadoAntiguo = existe.get(0);
				if (!empleadoAntiguo.getActivo() && empleadoAntiguo.getDepartamento().getActivo()) {
					entityManager.lock(empleadoAntiguo.getDepartamento(), LockModeType.OPTIMISTIC_FORCE_INCREMENT);
					empleadoAntiguo.setActivo(true);
					entityTransaction.commit();
					retorno = empleadoAntiguo.getId();
				} else
					entityTransaction.rollback();
			}

			entityManager.close();
			emfactory.close();

		}

		return retorno;
	}

	public int actualizarEmpleado(TEmpleado empleado) {
		int retorno = -1;
		if (empleado != null) {
			int idEmpleado = empleado.getID();
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("Sensacar");
			EntityManager entityManager = emfactory.createEntityManager();
			EntityTransaction entityTransaction = entityManager.getTransaction();
			entityTransaction.begin();
			Empleado empAntiguo = entityManager.find(Empleado.class, idEmpleado);
			int idNuevoDepartamento = empleado.getDepartamento();
			Departamento nuevoDepartamento = entityManager.find(Departamento.class, idNuevoDepartamento,
					LockModeType.OPTIMISTIC_FORCE_INCREMENT);
			if (nuevoDepartamento != null && nuevoDepartamento.getActivo()) {
				if (empleado instanceof TEmpleadoParcial && empAntiguo instanceof EmpleadoTP) {
					empAntiguo.setActivo(empleado.getActivo());
					empAntiguo.setDepartamento(nuevoDepartamento);
					empAntiguo.setDNI(empleado.getDNI());
					empAntiguo.setNombre(empleado.getNombre());
					((EmpleadoTP) empAntiguo).setHorasSemana(((TEmpleadoParcial) empleado).getHorasSemana());
					((EmpleadoTP) empAntiguo).setSueldoHora(((TEmpleadoParcial) empleado).getSueldoHora());
					retorno = idEmpleado;
					entityTransaction.commit();

				} else if (empleado instanceof TEmpleadoCompleto && empAntiguo instanceof EmpleadoTC) {
					empAntiguo.setActivo(empleado.getActivo());
					empAntiguo.setDepartamento(nuevoDepartamento);
					empAntiguo.setDNI(empleado.getDNI());
					empAntiguo.setNombre(empleado.getNombre());
					((EmpleadoTC) empAntiguo).setDietas(((TEmpleadoCompleto) empleado).getDietas());
					((EmpleadoTC) empAntiguo).setSueldoBase(((TEmpleadoCompleto) empleado).getSueldoBase());
					retorno = idEmpleado;
					entityTransaction.commit();

				} else
					entityTransaction.rollback();

			} else
				entityTransaction.rollback();
			entityManager.close();
			emfactory.close();
		}
		return retorno;
	}

	public int borrarEmpleado(int id) {
		int retorno = -1;
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("Sensacar");
		EntityManager entityManager = emfactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		entityTransaction.begin();
		Empleado empleado = entityManager.find(Empleado.class, id);
		if (empleado != null) {
			entityManager.lock(empleado.getDepartamento(), LockModeType.OPTIMISTIC_FORCE_INCREMENT);
			if (empleado.getActivo()) {
				TypedQuery<Tiene> consulta = entityManager.createNamedQuery("Negocio.Competencia.Tiene.readByEmpleado",
						Tiene.class);
				consulta.setParameter("empleado", empleado);
				List<Tiene> competenciasDeEmpleado = consulta.getResultList();
				if (competenciasDeEmpleado.isEmpty()) {
					empleado.setActivo(false);
					entityTransaction.commit();
					retorno = id;
				} else {
					for (Tiene t : competenciasDeEmpleado) {
						t.setActivo(false);
					}
					empleado.setActivo(false);
					entityTransaction.commit();
					retorno = id;
				}
			} else
				entityTransaction.rollback();
		} else
			entityTransaction.rollback();
		entityManager.close();
		emfactory.close();

		return retorno;
	}

	public TEmpleado leerEmpleado(int id) {
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("Sensacar");
		EntityManager entityManager = emfactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		entityTransaction.begin();
		Empleado empleado = entityManager.find(Empleado.class, id, LockModeType.OPTIMISTIC);
		entityTransaction.commit();
		entityManager.close();
		emfactory.close();
		if (empleado != null)
			return empleado.toTransfer();
		else
			return null;
	}

	public List<TEmpleado> leerListaEmpleados() {
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("Sensacar");
		EntityManager entityManager = emfactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		entityTransaction.begin();
		TypedQuery<Empleado> consulta = entityManager.createNamedQuery("Negocio.Empleado.Empleado.readAll",
				Empleado.class);
		List<Empleado> retornoAux = consulta.getResultList();
		List<TEmpleado> retorno = new ArrayList<>();
		for (Empleado e : retornoAux)
			retorno.add(e.toTransfer());
		entityTransaction.commit();
		entityManager.close();
		emfactory.close();
		return retorno;
	}

}